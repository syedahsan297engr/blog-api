Initialize GitHub Here, and then make it to the main branch

setup the folder structure.
npm run dev will start the server in development mode
npm start will start the server in production mode


setup the models, 
I am having problems in association

I am using require now, because all codes are using require

Ok so Have done the work of this, and everything till now is working fine
Now work on migrations

npx sequelize-cli migration:generate --name create-users
npx sequelize-cli migration:generate --name create-posts
npx sequelize-cli migration:generate --name create-comments

I will test these migrations on laptop, also I have to add controllers and routes logic here as well, along with authentication, I will refer to mern-auth project

Now let's think about migrations

created migration, test them in laptop using 
npx sequelize-cli db:migrate

Changes db.config.js for migration purposes

Now for migration purposes add this to your package in scripts
"db:migrate": "npx sequelize-cli db:migrate --config backend/config/db.config.js"
Initialize as npx sequelize-cli init, after running this seeders folder is created and config.json as well

The seeders folder in a Sequelize project is used to store seed files, which are scripts for populating the database with initial data or test data. Seeding is the process of adding initial records to your database tables, which can be useful for setting up the database with required default values or for testing purposes.

index file is also created in the models folder as well.

Then run as npm run db:migrate

Ok so migration is working fine, now change your configurations to actual db

Now I will make controllers and routes also add authentication

Make a separate authentication and error handling logic in utils section
Then middleware and other work, today work on authentication and jwt.

Sign in Sign up Completed, Now for comments and posts 

Done with sample controllers and routes implementation alongwith authentication, Now let's test this in postman
In you postman workspace set authorization to bearer token and so, this token should be the one that is generated after user sign in.

Implementation of Post working fine
Implementation of Comments Working fine


This was the basic CRUD just to check jwt working, will add according to the application later.

Also make a readme file as well

Go to your github account and create a pull request there

Now adding middleware for errors, make sure to first add that in index.js file then use that errorhandler from utils

errorhandler Added, now More customized end points


1. A JWT based secure API and is deployed on Heroku.
2. User registration
3. User signin
4. CRUD to create posts. Post will belong to users. 
5. CRUD to create comments for different posts. Comments will belong to posts.
6: CURD to create sub-comments for different comments. Sub-comments will belong to comments.
7. Best coding practices should be followed. Promise.all, async await, ES 6 syntax, error codes, exceptional handling.
8. Share postman collection of all APIs
9. Create Readme for project setup or if there are any other instructions.

So these are the requirements

Deployment will be dealt at end, 
1,2,3 are done

I have add controllers for posts, like create, update, get, delete, update and they are secure as well
Now one thing is that I have to show comments in posts, but first handle comments like I have to take care of subcomments so that's why, first make use of comments.

For comments I have created create, update, delete, getcomments on posts, getcommentbyid. 

Now what to do next

-> Make some nested comments, then utilize that getComments method as you will get nested comments in there as well

Ok so comments are nested and we got that tree like nested structure.

Now More work is on:

Write CRUD APIs for Blog Posts and comments.

1. List all POSTS. API should support pagination and search. All posts should be publically accessible.
2. List all comments of a Post. Should support pagination. Includes comments of a comment as well.
3. List all posts of a user with comments. Implement pagination as well.

Ok First implement logic then I will apply pagination at the end.

fetch all posts with comments nested in them....
fetch all the posts specific to users with comments nested in them....
Search Posts by title and content, Search comments by this as well. -> the structure should be shown as posts along with comments and comments should include subcomments as well

I will apply searching later -------------------- keep searching simple

Posts with comments done, and user can search for their posts, now searching on title and body next day and then will include the pagination

Make a separate controller and route for this

When this will be implemented then apply pagination.

After this write readme file as well.

Pagination is implemented, now readme file generation then deployment.

git add .
git commit -m "msg"
git fetch upstream
git branch
-> check branch and switch to main in this case
git checkout main
git remote -v
git push origin main

Then go to github you will see the msg you're one commit ahead then create a pull request